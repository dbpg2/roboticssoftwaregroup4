/* USER CODE BEGIN Header */
/**
 ******************************************************************************
 * @file           : main.c
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * <h2><center>&copy; Copyright (c) 2021 STMicroelectronics.
 * All rights reserved.</center></h2>
 *
 * This software component is licensed by ST under BSD 3-Clause license,
 * the "License"; You may not use this file except in compliance with the
 * License. You may obtain a copy of the License at:
 *                        opensource.org/licenses/BSD-3-Clause
 *
 ******************************************************************************
 */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

#include "can.h"
#include "dma.h"
#include "gpio.h"
#include "i2c.h"
#include "spi.h"
#include "tim.h"
#include "usart.h"
#include "math.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "camera/camera.h"
#include "lcd/lcd.h"
#include "lcd/lcd_graphics.h"
// #include "legacy/camera.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
extern motor_status motor1_stat;
extern motor_status motor2_stat;
extern motor_status motor3_stat;
extern motor_status motor4_stat;

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

void PID(uint32_t* targetRpm, uint32_t* inputRpm , uint32_t* outputRpm){

	uint32_t current_error = 0;
	uint32_t current_time = HAL_GetTick();
	uint32_t static kp = 0, ki = 0, kd = 0;
	uint32_t diff = 0;
	uint32_t prop = 0;
	uint32_t integral = 0;
	uint32_t static prev_time = 0;
	uint32_t static prev_error = 0;

	current_error =  targetRpm - inputRpm;

	prop = kp * current_error;
	diff = kd * (current_error - prev_error)/(current_time - prev_time);

	outputRpm = prop + diff;

	prev_time = current_time;
	prev_error = current_error;

}

void speedcal(uint32_t Vx, uint32_t Vy, uint32_t Vw){

	uint32_t motor1_tar = 0, motor2_tar = 0, motor3_tar = 0;
	uint32_t* motor1_out = 0, motor2_out = 0, motor3_out = 0;

	motor1_tar = Vy + Vw;
	motor2_tar = -(sqrt(3)/2)*Vx - (1/2)*Vy + Vw;
	motor3_tar = (sqrt(3)/2)*Vx - (1/2)*Vy + Vw;

	PID(motor1_tar, motor1_stat.speed_rpm , motor1_out);
	PID(motor2_tar, motor2_stat.speed_rpm , motor2_out);
	PID(motor3_tar, motor3_stat.speed_rpm , motor3_out);

	CAN_cmd_motor(motor1_out, motor2_out, motor3_out, 0,&hcan1);

}
//
//
//}

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


/* USER CODE END 0 */

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
	/* USER CODE BEGIN 1 */

	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();

	SystemClock_Config();

	MX_GPIO_Init();
	MX_CAN1_Init();
	MX_CAN2_Init();
	MX_USART1_UART_Init();
	MX_DMA_Init();
	MX_USART2_UART_Init();

	MX_TIM6_Init();
	/* USER CODE BEGIN 2 */
	volatile uint32_t last_ticks = 0;
	// we turn off all the led first
	led_off(LED1);
	led_off(LED2);
	led_off(LED3);
	led_off(LED4);
	tft_init(PIN_ON_TOP, BLACK, WHITE, YELLOW, DARK_GREEN);

	// Init camera
	camera_GPIO_init();
	tft_prints(0, 0, "Initing camera");
	tft_update(0);
	if (camera_init() == CAM_NOT_INITED || camera_init() == CAM_INIT_ERROR) {
		tft_prints(0, 0, "No OV7725 module");
	} else {
		tft_prints(0, 0, "Inited");
		cam_set_state(CAM_CAPTURING);
	}
	tft_update(0);
	cam_set_window(0, 0, QQVGA_120x160);
	cam_set_colormode(CAM_RGB565);//turn into rgb camera

	/* USER CODE END 2 */

	can_init();

	while (1) {

	    	if (tft_update(10) == 0) {
				tft_prints(0,0,"m1_spd: %d", motor1_stat.speed_rpm);
				tft_prints(0,1,"m1_temp: %d", motor1_stat.temperature);
				tft_prints(0,2,"m1_cur: %d", motor1_stat.given_current);

				tft_prints(0,0,"m2_spd: %d", motor1_stat.speed_rpm);
				tft_prints(0,1,"m2_temp: %d", motor1_stat.temperature);
				tft_prints(0,2,"m2_cur: %d", motor1_stat.given_current);

				tft_prints(0,0,"m3_spd: %d", motor1_stat.speed_rpm);
				tft_prints(0,1,"m3_temp: %d", motor1_stat.temperature);
				tft_prints(0,2,"m3_cur: %d", motor1_stat.given_current);

			}


	    	HAL_CAN_RxFifo0MsgPendingCallback(&hcan1);
	    	HAL_CAN_RxFifo0MsgPendingCallback(&hcan2);
	    	UpdateMotorStatus();

//BTN1ï¼šforward, BTN2: backward, Right: A:2/3*speed B: -1/3*speed, C: -1/3*speed, Left: A: -2/3*speed B: 1/3*speed C: 1/3*speed

			if(!btn_read(BTN1)){
//				speedcal(0, 1000, -1000); //forward
				CAN_cmd_motor(0, 500*0.577, 500*(-0.577), 0,&hcan1);
		        if (HAL_GetTick() - last_ticks >= 1000) {
		            led_toggle(LED4);
		            last_ticks = HAL_GetTick();
		            CAN_cmd_motor(0, 0, 0, 0,&hcan1);
		        }
		        //change to speed(var) calculated by PID
//				CAN_cmd_motor(1000, 1000, 1000, 1000,&hcan2); //rotate clockwise, parameter list(motor1,motor2,motor3,motor4)
			}
//			if(btn_read(BTN1)){
//				CAN_cmd_motor(0, 0, 0, 0,&hcan1);
////				CAN_cmd_motor(0, 0, 0, 0,&hcan2);//remember to set it back to 0 once you don't want to run the motor.
//			}
			if(!btn_read(BTN2)){
//				speedcal(0, -1000, 1000); //backward
				CAN_cmd_motor(-1000, -1000, -1000, -1000,&hcan1); //rotate in anti clockwise.
			}
			if(btn_read(BTN2)){
				CAN_cmd_motor(0, 0, 0, 0,&hcan1);
//				CAN_cmd_motor(0, 0, 0, 0,&hcan2);
			}



			// led blinky - useful for indicating the condition of the board
	        if (HAL_GetTick() - last_ticks >= 100) {
	            led_toggle(LED4);
	            last_ticks = HAL_GetTick();
	        }
	/* USER CODE END 3 */
	}
}

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
	RCC_OscInitStruct.PLL.PLLM = 4;
	RCC_OscInitStruct.PLL.PLLN = 168;
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
	RCC_OscInitStruct.PLL.PLLQ = 4;
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
		Error_Handler();
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
		Error_Handler();
	}
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {}
	/* USER CODE END Error_Handler_Debug */

}

#ifdef USE_FULL_ASSERT
/**
 * @brief  Reports the name of the source file and the source line number
 *         where the assert_param error has occurred.
 * @param  file: pointer to the source file name
 * @param  line: assert_param error line source number
 * @retval None
 */
void assert_failed(uint8_t *file, uint32_t line) {
	/* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number,
	   ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
	/* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
