/* USER CODE BEGIN Header */
/**
 ******************************************************************************
 * @file           : main.c
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * <h2><center>&copy; Copyright (c) 2021 STMicroelectronics.
 * All rights reserved.</center></h2>
 *
 * This software component is licensed by ST under BSD 3-Clause license,
 * the "License"; You may not use this file except in compliance with the
 * License. You may obtain a copy of the License at:
 *                        opensource.org/licenses/BSD-3-Clause
 *
 ******************************************************************************
 */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "can.h"
#include "dma.h"
#include "i2c.h"
#include "spi.h"
#include "tim.h"
#include "usart.h"
#include "gpio.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "camera/camera.h"
#include "lcd/lcd.h"
#include "lcd/lcd_graphics.h"
#include "math.h"
//#include "legacy/camera.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

void pwm_init(void) {
	TIM5->ARR = 3999;
	//set the timer1 auto-reload counter
	TIM5->PSC = 419;
	TIM5->CCR1 = 360;

	TIM4->ARR = 839;
		//set the timer1 auto-reload counter
		TIM4->PSC = 9;
		TIM4->CCR3 =700 ;
		TIM4->CCR4 =700 ;
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
}
/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */

const int iter=3;
double angle =0;
double a =0;
float target_rad = .0f;
float current_rad = .0f;

void servo_control_task(void) {
    static uint32_t servo_control_tick = 0;
    if (HAL_GetTick() - servo_control_tick >= 4) {
      // manage the servo for every 4ms
      if (target_rad != current_rad) {
        float diff = target_rad - current_rad;
        diff = fmax(fmin(diff, 0.1), -0.1); // at most move 0.1 rad each time
        current_rad += diff;
        TIM5->CCR1 = current_rad; // define your own convert_it_to_CCR_value
      }
      servo_control_tick = HAL_GetTick();
    }
}


void arcStop(){
	gpio_set(In1);
	gpio_set(In2);
	gpio_set(In3);
	gpio_set(In4);

}

void arcForward(){
	TIM5->CCR1=360;

	gpio_reset(In1);
	gpio_set(In2);
	gpio_reset(In3);
	gpio_set(In4);
	TIM4->CCR3 =625 ;
	TIM4->CCR4 =625 ;


}

void arcReverse(){
	//gpio_set(In1);
	//gpio_reset(In2);
	//gpio_set(In3);
	//gpio_reset(In4);
	//TIM4->CCR3=900;
	//TIM4->CCR4=900;
}

void arcLeft(int countLeft){
	TIM5->CCR1=round(360+countLeft*1.6);
//	gpio_reset(In1);
//	gpio_set(In2);
//	gpio_set(In3);
//	gpio_reset(In4);
	gpio_reset(In1);
		gpio_set(In2);
		gpio_reset(In3);
		gpio_set(In4);
	TIM4->CCR3 =675 ;
	TIM4->CCR4 =675 ;
}

void arcRight(int countRight){
	//99-4*angle*180/(7.5*3.14);
	TIM5->CCR1=round(360-countRight*1.6);
	gpio_set(In1);
	gpio_reset(In2);
	gpio_reset(In3);
	gpio_set(In4);
	TIM4->CCR3 =675 ;
	TIM4->CCR4 =675 ;
}

void bNwFilter(uint16_t *img){

	for (int i = 0; i < 120 * 160; i++){
		//some type of tangent function

		if (img[i] > 45000){//19660
			img[i] = BLACK;
			a=a+1;
		}
		else{
			img[i] = WHITE;
		}
	}
}



void sobel12(uint16_t *cameraDataPtr, uint16_t width, uint16_t height){
	const uint16_t vmatrix[9] = {-1, -2, -1, 0, 0, 0, 1, 2, 1};
	const uint16_t hmatrix[9] = {-1, 0, 1, -2, 0, 2, -1, 0, 1};

	int start_height = 2;
	int end_height = height-1;//subtract 1 from desired
	int start_width = 1;
	int end_width = width-1;//subtract 1 from desired

	for (int y=start_height; y<end_height; y++) {
		for (int x=start_width; x<end_width; x++) {
			uint16_t horizontal_kernel = 0;
			uint16_t vertical_kernel = 0;

			//fill the matrix
			int k = 0;
			for (int v=y-1; v<=y+1; v++) {
				for (int u=x-1; u<=x+1; u++) {
					 horizontal_kernel += vmatrix[3 * (v - y + 1) + (u - x + 1)] * (*(cameraDataPtr + width * v + u)>> 11);
					 vertical_kernel += hmatrix[3 * (v - y + 1) + (u - x + 1)] * (*(cameraDataPtr + width * v + u)>> 11);
				}
			}

			//change inside this
			uint16_t temp = (uint16_t)sqrt(pow(horizontal_kernel,2) + pow(vertical_kernel,2));
			if (temp >= pow(2,5)){
				temp = pow(2,5) - 1;
			}
			if (temp < 0){
				temp = 0;
			}
			*(cameraDataPtr + width * (y-1) + (x-1)) = ((temp) << 11) + ((temp) << 6) + temp;
		}
	}
}

int largest(int list[], int n) {
	int max = list[0];
	for (int i=0; i<n;i++) {
		if (list[i]> max) {
			max=list[i];
		}
	}
	return max;
}

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */


/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */

int Left[5];
		int Right[5];
		int maxRight=0;
		int maxLeft=0;
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_CAN1_Init();
  MX_CAN2_Init();
  //MX_SPI1_Init();
  MX_USART1_UART_Init();
  //MX_I2C2_Init();
  MX_DMA_Init();
  //MX_USART2_UART_Init();
  MX_TIM2_Init();
  MX_TIM5_Init();
  MX_TIM4_Init();
  MX_TIM6_Init();
  pwm_init();
  int timer=0;
  /* USER CODE BEGIN 2 */
	volatile uint32_t last_ticks = 0;
	volatile uint32_t timerRight = 0;
	// we turn off all the led first
	led_off(LED1);
	led_off(LED2);
	led_off(LED3);
	led_off(LED4);
	tft_init(PIN_ON_TOP, BLACK, WHITE, YELLOW, DARK_GREEN);
	// Init camera
	camera_GPIO_init();


	tft_update(0);
	if (camera_init() == CAM_NOT_INITED || camera_init() == CAM_INIT_ERROR) {
		tft_prints(0, 0, "No OV7725 module");
	} else {
		tft_prints(0, 0, "Inited");
		cam_set_state(CAM_CAPTURING);

	}


		int timerRight2=0;
		int timerLeft2=0;
		int timerLeft=0;
		int timerforfullturn=0;
		int timebigturn=0;
		int countbigturn=0;
		int excutetimer=0;

	cam_set_window(10, 30, QQVGA_120x160);
	cam_set_colormode(CAM_GRAYSCALE);
	cam_set_sharpness(10,10,120,160);
	cam_set_brightness(0x08);
	uint16_t img[120 * 160] = {0};
	uint16_t printable[120 * 160] = {0};
	cam_set_framerate(CAM_150FPS);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */



		servo_control_task();

		int countRight=0;
		int countLeft=0;

		if (cam_is_frame_ready()) {

		cam_get_rgb565(img);



		static uint32_t process_tick = 0;
		if (HAL_GetTick() - process_tick >= 70) {
			process_tick = HAL_GetTick();
			sobel12(img, 120, 80);
			bNwFilter(img);
		}






		if ((HAL_GetTick() - timerRight )>= 100) {
			for (int i =13;i<26;i++) {
				for (int j=90;j<99;j++){
					if (img[120*i+j]==BLACK) {
						countRight +=1;
						}
					}
				}
			timerRight= HAL_GetTick();

			}


//
//			tft_prints(0,8,"%d",countRight);
//			tft_prints(0, 9, "%d", TIM5->CCR1);
//			tft_prints(0, 7, "%d", timerRight);

			if ((HAL_GetTick() - timerLeft )>= 100) {
		for (int i =13;i<26;i++) {
					for (int j=20;j<29;j++){
						if (img[120*i+j]==BLACK) {
							countLeft +=1;
					}
		}
		}
		timerLeft= HAL_GetTick();
			}

			if ((HAL_GetTick() - timebigturn )>= 100) {
					for (int i =9;i<14;i++) {
								for (int j=25;j<34;j++){
									if (img[120*i+j]==BLACK) {
										countbigturn +=1;
								}
					}
					}
					timebigturn= HAL_GetTick();
						}
			if (countbigturn>20 && countLeft>20) {
				 int number = countLeft;
				 excutetimer=HAL_GetTick();
				 if (HAL_GetTick()-excutetimer<1500) {
					 arcLeft(countLeft);
				 }
			}

			if ((HAL_GetTick() - timer )>= 100) {
			if ((countRight - countLeft)>0) {
				arcRight(countRight);
			}
			else if ((countLeft - countRight)>0){
				arcLeft(countLeft);
			}
			else {
				arcForward();
			}
			timer = HAL_GetTick();
			}

			if (countLeft>100) {
				timerforfullturn=HAL_GetTick();
				if (countRight>100 && (HAL_GetTick()-timerforfullturn)<1250) {
					TIM5->CCR1=round(360+countLeft*1.6);
					//	gpio_reset(In1);
					//	gpio_set(In2);
					//	gpio_set(In3);
					//	gpio_reset(In4);
						gpio_reset(In1);
							gpio_set(In2);
							gpio_reset(In3);
							gpio_set(In4);
						TIM4->CCR3 =700 ;
						TIM4->CCR4 =700 ;
				}
			}



//		if (countRight ==0 && countLeft==0) {
//			arcForward();
//			tft_prints(0,7,"Forward");
//		}
//		else if (countLeft >0 && countRight==0){
//						if ((HAL_GetTick()-timerLeft2 )==5) {
//							maxLeft = largest(Left,5);
//							timerLeft2=HAL_GetTick();
//						}
//						arcLeft(maxLeft);
//
//				}
//		else if (countRight >0 && countLeft==0 ) {
//			arcRight(countRight);
//		}

//




		for (int i =15;i<24;i++) {
			for (int j=90;j<99;j++){
				img[120*i+j]=RED;
			}
		}

		for (int i =9;i<14;i++) {
			for (int j=25;j<34;j++){
				img[120*i+j]=YELLOW;
			}
			}

		for (int i =15;i<24;i++) {
			for (int j=20;j<29;j++){
				img[120*i+j]=GREEN;
			}
		}

		cam_rgb2printable(img, printable);
		tft_print_image(printable, 0, 0, cam_sizes[cam_get_framesize()].width,cam_sizes[cam_get_framesize()].height/2);
//		tft_update(0);
		led_toggle(LED2);
		}



//		if (HAL_GetTick() - timer >= 1000) {
//			if (angle/a>0.4 && angle/a <= 0.6) {
//									arcRight(angle/a);
//									tft_prints(0,7,"Right");
//
//								}
//								else if(angle/a>0.6 && angle/a <= 0.8) {
//									arcLeft(angle/a);
//									tft_prints(0,8,"Left");
//
//								}
//								else {
//									arcForward();
//									tft_prints(0,9,"forward");
//								}
//			timer=HAL_GetTick();
//

		// led blinky - useful for indicating the condition of the board


		if (HAL_GetTick() - last_ticks >= 100) {
			led_toggle(LED3);
			last_ticks = HAL_GetTick();
			tft_update(0);
		}
	}
}



 /* USER CODE END 3 */


/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 168;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
  {
    Error_Handler();
  }
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {}
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number,
	   ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
