/* USER CODE BEGIN Header */
/**
 ******************************************************************************
 * @file           : main.c
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * <h2><center>&copy; Copyright (c) 2021 STMicroelectronics.
 * All rights reserved.</center></h2>
 *
 * This software component is licensed by ST under BSD 3-Clause license,
 * the "License"; You may not use this file except in compliance with the
 * License. You may obtain a copy of the License at:
 *                        opensource.org/licenses/BSD-3-Clause
 *
 ******************************************************************************
 */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "can.h"
#include "dma.h"
#include "i2c.h"
#include "spi.h"
#include "tim.h"
#include "usart.h"
#include "gpio.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "camera/camera.h"
#include "lcd/lcd.h"
#include "lcd/lcd_graphics.h"
#include "math.h"
//#include "legacy/camera.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

void pwm_init(void) {
	TIM5->ARR = 16799;
	//set the timer1 auto-reload counter
	TIM5->PSC = 99;
	TIM5->CCR1 =99 ;

	TIM4->ARR = 839;
		//set the timer1 auto-reload counter
		TIM4->PSC = 9;
		TIM4->CCR3 =700 ;
		TIM4->CCR4 =700 ;
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
}
/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */


//uint8_t colorToGrey(uint16_t pixelValue){
//	red = ((red & 0xF800) >> 11); //Get the image at red May need that in real life tasks
//	green = ((green & 0x07E0) >> 5); //Sub the pixel to green
//	blue = (blue & 0x001F); //Sub the pixel to blue
//	int grey = 0 ;
//	grey = (red*0.3) + (green*0.59) + (blue*0.11);
//
//}


const int iter=3;
double angle =0;
double a =0;

//one array
void sobel(uint16_t *cameraDataPtr, uint16_t width, uint16_t height){
	const uint16_t vmatrix[9] = {-1, -2, -1, 0, 0, 0, 1, 2, 1};
	const uint16_t hmatrix[9] = {-1, 0, 1, -2, 0, 2, -1, 0, 1};
//	const uint16_t guassian[9] = {1,2,1,2,4,2,1,2,1};

	uint16_t window[9];

//	const uint16_t vmatrix[9] = {3, 10, 3, 0, 0, 0, -1, -10, -3};
//	const uint16_t hmatrix[9] = {3, 0, -3, 10, 0, -10, 3, 0, -3};

	for (int y=61; y<height-1; y++) {
		for (int x=1; x<width-1; x++) {

			//fill the matrix
			int k = 0;
			for (int v=y-1; v<=y+1; v++) {
				for (int u=x-1; u<=x+1; u++) {
					window[k++] = *(cameraDataPtr + width * v + u)>> 11;
				}
			}

			//change inside this
			uint16_t horizontal_kernel = 0;
			uint16_t vertical_kernel = 0;
//			uint16_t guassian_sum = 0;

			for (int i = 0; i < 9; i++){
				horizontal_kernel += vmatrix[i] * window[i];
				vertical_kernel += hmatrix[i] * window[i];
			}
/*
			uint16_t temp = (uint16_t)sqrt(pow(horizontal_kernel,2) + pow(vertical_kernel,2));



//			if (tft_update(10) == 0) {
//				tft_printu(0, 0, temp);
//				tft_printu(50, 1, *(cameraDataPtr + width * x + y)>> 11);
//			}

				if(temp > 15000){
					*(cameraDataPtr + width * (y-1) + (x-1)) = WHITE;
					angle += atan2(vertical_kernel,horizontal_kernel);
					a=a+1;
				}
				else if(temp < 6000){
					*(cameraDataPtr + width * (y-1) + (x-1)) = BLACK;
				}
				else{
					for (int v=y-1; v<=y+1; v++) {
						for (int u=x-1; u<=x+1; u++) {
							if(*(cameraDataPtr + width * v + u) == WHITE){
								*(cameraDataPtr + width * (y-1) + (x-1)) = WHITE;
								tft_printu(0, 0, temp);
								angle += atan2(vertical_kernel,horizontal_kernel);
								a=a+1;
							}
							else{
								*(cameraDataPtr + width * (y-1) + (x-1)) = BLACK;
							}
						}
					}
				}


//			*(cameraDataPtr + width * (y-1) + (x-1)) = ((temp) << 11) + ((temp) << 6) + temp;
		*/
		}

	}

}


void arcStop(){
	gpio_set(In1);
	gpio_set(In2);
	gpio_set(In3);
	gpio_set(In4);

}

void arcForward(){
	//gpio_reset(In1);
	//gpio_set(In2);
	//gpio_reset(In3);
//	gpio_set(In4);

}

void arcReverse(){
	//gpio_set(In1);
	//gpio_reset(In2);
	//gpio_set(In3);
	//gpio_reset(In4);
	//TIM4->CCR3=900;
	//TIM4->CCR4=900;
}

void arcLeft(int angle){





			//99+4*angle*180/(7.5*3.14);
	//gpio_reset(In1);
	//gpio_set(In2);
	//gpio_set(In3);
	//gpio_reset(In4);


}

void arcRight(int angle){
	TIM5->CCR1=701		;																																																										;
	//99-4*angle*180/(7.5*3.14);
	//gpio_set(In1);
	//gpio_reset(In2);
	//gpio_reset(In3);
	//gpio_set(In4);
}

void bNwFilter(uint16_t *img){

	for (int i = 0; i < 120 * 160; i++){
		//some type of tangent function

		if (img[i] > 15000){//19660
			img[i] = WHITE;
			a=a+1;
		}
		else{
			img[i] = BLACK;
		}
	}
}

void Guassian(uint16_t *cameraDataPtr,  uint16_t width, uint16_t height){
//	const uint16_t guassian[9] = {1,2,1,2,8,2,1,2,1};
//	const uint16_t guassian[9] = {1,2,1,2,4,2,1,2,1};
	const uint16_t guassian[25] = {1,4,7,4,1,4,16,26,16,4,7,26,41,26,7,4,16,26,16,4,1,4,7,4,1};
	uint16_t window[25];

	for (int x=1; x<width-1; x++) {
			for (int y=61; y<height-1; y++) {
				//fill the matrix
				int k = 0;
				for (int u=x-1; u<=x+1; u++) {
					for (int v=y-1; v<=y+1; v++) {
						window[k++] = *(cameraDataPtr + width * v + u) >> 11;
					}
				}
				uint16_t guassian_sum = 0;
				//change inside this
				for (int i = 0; i < 25; i++){
					guassian_sum += (1/273.00)*guassian[i] * window[i];
				}
				*(cameraDataPtr + width * (y-1) + (x-1)) =((guassian_sum) << 11) + ((guassian_sum) << 6) + guassian_sum;
			}
		}

}

void sobel12(uint16_t *cameraDataPtr, uint16_t width, uint16_t height){
	const uint16_t vmatrix[9] = {-1, -2, -1, 0, 0, 0, 1, 2, 1};
	const uint16_t hmatrix[9] = {-1, 0, 1, -2, 0, 2, -1, 0, 1};

	int start_height = 70;
	int end_height = height-1;//subtract 1 from desired
	int start_width = 1;
	int end_width = width-1;//subtract 1 from desired

	for (int y=start_height; y<end_height; y++) {
		for (int x=start_width; x<end_width; x++) {
			uint16_t horizontal_kernel = 0;
			uint16_t vertical_kernel = 0;

			//fill the matrix
			int k = 0;
			for (int v=y-1; v<=y+1; v++) {
				for (int u=x-1; u<=x+1; u++) {
					 horizontal_kernel += vmatrix[3 * (v - y + 1) + (u - x + 1)] * (*(cameraDataPtr + width * v + u)>> 11);
					 vertical_kernel += hmatrix[3 * (v - y + 1) + (u - x + 1)] * (*(cameraDataPtr + width * v + u)>> 11);
				}
			}

			//change inside this
			uint16_t temp = (uint16_t)sqrt(pow(horizontal_kernel,2) + pow(vertical_kernel,2));
			if (temp >= pow(2,5)){
				temp = pow(2,5) - 1;
			}
			if (temp < 0){
				temp = 0;
			}
			*(cameraDataPtr + width * (y-1) + (x-1)) = ((temp) << 11) + ((temp) << 6) + temp;
		}
	}
}

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_CAN1_Init();
  MX_CAN2_Init();
  //MX_SPI1_Init();
  MX_USART1_UART_Init();
  //MX_I2C2_Init();
  MX_DMA_Init();
  MX_USART2_UART_Init();
  MX_TIM5_Init();
  MX_TIM4_Init();
  MX_TIM6_Init();
  pwm_init();
  int timer=0;
  /* USER CODE BEGIN 2 */
	volatile uint32_t last_ticks = 0;
	// we turn off all the led first
	led_off(LED1);
	led_off(LED2);
	led_off(LED3);
	led_off(LED4);
	tft_init(PIN_ON_TOP, BLACK, WHITE, YELLOW, DARK_GREEN);
	// Init camera
	camera_GPIO_init();
	tft_prints(0, 0, "Initing camera");

	tft_update(0);
	if (camera_init() == CAM_NOT_INITED || camera_init() == CAM_INIT_ERROR) {
		tft_prints(0, 0, "No OV7725 module");
	} else {
		tft_prints(0, 0, "Inited");
		cam_set_state(CAM_CAPTURING);

	}
	tft_update(0);
	cam_set_window(10, 30, QQVGA_120x160);
	cam_set_colormode(CAM_GRAYSCALE);
	cam_set_sharpness(10,10,120,160);
	cam_set_brightness(0x08);
	uint16_t img[120 * 160] = {0};
	uint16_t printable[120 * 160] = {0};
	cam_set_framerate(CAM_150FPS);

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		if (cam_is_frame_ready()) {

		cam_get_rgb565(img);
		}
		TIM5->CCR1=10000;
		tft_prints(0,3,"%d",TIM5->CCR1);
		tft_update(0);



//		for(int i = 0; i < 120 * 160 ; i++){
//			img[i] = colorToGrey(img[i]) >> 16;
//		}




		//Guassian(img,120,160);
//		medianFilter(img,120,160);
		sobel12(img, 120, 80);
		bNwFilter(img);
		int countRight=0;
		int countLeft=0;


		for (int i =13;i<26;i++) {
			for (int j=90;j<99;j++){
				if (img[120*i+j]==BLACK) {
					countRight +=1;
				}
			}
		}
		for (int i =13;i<26;i++) {
					for (int j=20;j<29;j++){
						if (img[120*i+j]==BLACK) {
							countLeft +=1;
						}
					}
		}

		if (countRight ==0 && countLeft==0) {
			arcForward();
			tft_prints(0,7,"Forward");
		}
		else if (countLeft>0 && countRight==0){
					arcLeft(countLeft);
					tft_prints(0,6,"arc_Left %d",countLeft);
				}
		else if (countRight>0 && countLeft==0 ) {
			tft_prints(0,5,"arc_left %d",countRight);
			arcRight(countRight);
		}

		for (int i =15;i<24;i++) {
			for (int j=90;j<99;j++){
				img[120*i+j]=RED;
			}
		}
		for (int i =15;i<24;i++) {
			for (int j=20;j<29;j++){
				img[120*i+j]=GREEN;
			}
		}

		cam_rgb2printable(img, printable);
		tft_print_image(printable, 0, 0, cam_sizes[cam_get_framesize()].width,
						cam_sizes[cam_get_framesize()].height/2);
		tft_update(0);
		led_toggle(LED2);
		}


/*
		if (HAL_GetTick() - timer >= 1000) {
			if (angle/a>0.4 && angle/a <= 0.6) {
									arcRight(angle/a);
									tft_prints(0,7,"Right");

								}
								else if(angle/a>0.6 && angle/a <= 0.8) {
									arcLeft(angle/a);
									tft_prints(0,8,"Left");

								}
								else {
									arcForward();
									tft_prints(0,9,"forward");
								}
			timer=HAL_GetTick();
*/

/*
		uint16_t x1=120;//left pixel 1
		uint16_t y1 = 150;
		uint16_t x2=80;//right pixel 1
		uint16_t y2=130;
		if (img[120 * x1 + y1] == WHITE && img[120 * x2 + y2] == WHITE){
			arcForward();
		}
		else if (img[120 * x1 + y1] == BLACK && img[120 * x2 + y2] == WHITE){
			arcRight(20);
		}
		else if (img[120 * x1 + y1] == WHITE && img[120 * x2 + y2] == BLACK){
			arcLeft(20);
		}
		else{
			arcReverse();
		}
		*/


		// led blinky - useful for indicating the condition of the board
		if (HAL_GetTick() - last_ticks >= 100) {
			led_toggle(LED3);
			last_ticks = HAL_GetTick();
		}
	}


 /* USER CODE END 3 */


/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 168;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
  {
    Error_Handler();
  }
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {}
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number,
	   ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
