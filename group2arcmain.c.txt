/* USER CODE BEGIN Header */
/**
 ******************************************************************************
 * @file           : main.c
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * <h2><center>&copy; Copyright (c) 2021 STMicroelectronics.
 * All rights reserved.</center></h2>
 *
 * This software component is licensed by ST under BSD 3-Clause license,
 * the "License"; You may not use this file except in compliance with the
 * License. You may obtain a copy of the License at:
 *                        opensource.org/licenses/BSD-3-Clause
 *
 ******************************************************************************
 */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

#include "can.h"
#include "dma.h"
#include "gpio.h"
#include "i2c.h"
#include "spi.h"
#include "tim.h"
#include "usart.h"
#include <stdlib.h>
/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <math.h>
#include "camera/camera.h"
#include "lcd/lcd.h"
#include "lcd/lcd_graphics.h"
#include "PWM.h"
#define WIDTH 120
#define HEIGHT 160
#define SOBELW 120
#define SOBELH 80
#define X 80
#define Y -2
#define TARGET_SLOPE -0.97
// #include "legacy/camera.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

void SobelFilter(uint16_t* in, uint16_t* out, float* diff){

    static int8_t kernelx[3][3] = {{-1, 0, 1},
                       	   	   	   {-2, 0, 2},
								   {-1, 0, 1}};
    static int8_t kernely[3][3] = {{-1, -2, -1},
                        			{0,  0,  0},
									{1,  2,  1}};


    static uint16_t gray,grayscale,lastcount;
    static int gx,gy;
	uint8_t  count = 0,countwhite = 0, countHD = 0, countVD = 0,countline = 0,countline2 = 0;  // HD: horizontal distance

	float THD = abs(TARGET_SLOPE*X - Y - TARGET_SLOPE*20 - (-2)) / sqrt(TARGET_SLOPE*TARGET_SLOPE+1);  // target horizontal distance
	//object(x,y)= (80,2)
	static float  theta;
	float lastx=0,lasty=1,lastx2=115,lasty2=1,slope=0,slope2=0,line=0,avgx=0,countx=0,L=0, line2=0;
	uint16_t avgix =0 ;
	int avgiy = 0;
	static bool black =0 ;
    bool xoff = 0, xoff2 = 0,xoff3 = 0, xon=0,yoff=0,iyoff=0;   // xoff: turn left -> one coor reach 0, no need detect further
//    int sum_gx = 0, sum_gy = 0;
    float slope_x, slope_y;
    static float lastx_y, lasty_y,lastHD;
    diff[3]=0;

    for (uint8_t y=1; y<HEIGHT/2-1; y++) {
    	black = 0;
    	for (uint8_t x=WIDTH-3; x>1; x--) {
            gx=0, gy=0;

			// sobel window
            for(uint8_t u = 0; u < 3; u++){
                for(uint8_t v = 0; v < 3; v++){
                    uint8_t xn = x + u - 1;
                    uint8_t yn = y + v - 1;
                    gray = *(in + WIDTH*yn + xn);
                    gx += ((gray& 0x001F) * kernelx[v][u]);  //vertical
                    gy += ((gray& 0x001F) * kernely[v][u]);  //horizontal
                }
            }
//			if (-15<gx && gx<15){
//				gx=0;
//			}

//			if (-17<gy && gy<17){
//				gy=0;
//			}

//			 error handling
			if (-20<gx && gx<20){
				gx=0;
			}

			if (-20<gy && gy<20){
				gy=0;
			}



            grayscale = ceil(sqrt(gx * gx + gy * gy));
            *(out + WIDTH * y + x)=(grayscale<<11)+(grayscale<<6)+grayscale;

            if (!(gy == 0 && gx == 0 ) ){  // both no color
			    countwhite++;
//            	if (abs( x-lb
    		}
            if (!(gx == 0 && gy == 0) && !black && !xoff){ // near before x and x not yet reach

            	black = 1;

				if (x-lastx!=0&&abs((lastx)-x)<40){   //denominator not 0
//				slope += (x-lastx)/(-y-lasty);
					line++;
					slope += (-y-lasty)/(x-lastx);
				}

				// if (line>3){   // for turn right?? , take those black line
				// 	xon = 1;
				// }

//				if (abs(lastx-x)<20){
//					countline++;
//				}
//				lastcount = countline;
					lastx = x;
				lasty = -y; // as left corner is (0,0)
				if (x>WIDTH-8){   // turning left, lower part no while dot, so ignore them
					xoff=1;

//					 count++; //prevent noise for turn left
				}
//				 if (count>=2){
//					diff[3]=1;
//				 	xoff=1;
//				 }

				if (abs((lastx)-x)<40 && !xoff2){
					avgiy+=-y;
					avgix+=x;
//					xoff2=1;
					countHD++;
				}
				if (countHD>=3){
					xoff2=1;
				}
//				*(out + WIDTH * (int)y + (int)x)=(grayscale<<11)+(grayscale<<6)+grayscale;
//				break;
            }

        }
    	if (black == 0 && !xoff3 && y<3){
    		avgx = 1;
    		xoff3=1;

    	}
//    	 if (black == 0 && !xoff && xon){ //
//
//		 	line++;
//    	 }
    }
    	avgiy /= countHD;
    	avgix /= countHD;

    	tft_prints(0,5,"%d", countwhite);


        if (line>0){
        slope /= (line);
        }
        if (line>0&&line <= 3){
        	slope = -0.8;

        }
//        if (slope>=0){
//        	avgx=0;
//        }else{
//        	avgx /= countx;
//        }
//		if (countwhite<7||slope==0){
//			slope = 0.7;
//		}
        line = 0;
		theta = atan2((TARGET_SLOPE - slope),(1 + TARGET_SLOPE * slope));
    	float HD = abs(slope*X - Y - slope*avgix - (avgiy)) / sqrt(slope*slope+1);
//    	if (countwhite<=3){
//    		HD=80; // see nothing , so assume near left
//    	}
    	avgiy = 0;
    	avgix = 0;
        for (uint8_t x = 117; x>0;x--){
			for (uint8_t y=1; y<HEIGHT/2-1; y++){
				if ((*(out + WIDTH*y + x) & 0x001F)!=0){  // detect line in vertical direction
					if (abs(y-lasty2)<30){
						countline2++;
//						if (x>80&&slope<=-0.975&&HD>20){
//							HD=20;
//						}
					}
					if (abs(y-lasty2)<30){   // the y coordiantes of the two white dots is near
						if (!iyoff){
						avgiy=-y; //average index of y
						avgix = x;
						iyoff = 1;
//						countVD++; //prevent noise
						}
						if (x-lastx2!=0){   //denominator not 0

							line2++;
							slope2 += (-y+lasty2)/(x-lastx2);
						}
//				if (y<5){   // turning left, lower part no while dot, so ignore them
//					yoff=1;
//					// count++; //prevent noise for turn left
//				}
					}
						lasty2 = y;
                    lastx2 = x;

					break;
				}
			}
//			if (countVD>=3){
//				iyoff=1;
//			}
		}
        slope2/=line2;
//    	avgiy /= countVD;  // to find distance L
		if (/*lasty>-20&&*/xoff&&!slope2>0){
			diff[3] = 1;
		}
		if (avgiy<60 && avgix>115){
			diff[4] = 1;
		}else{
			diff[4] = 0;
		}
    	if (avgiy<10){
    		avgiy=10;
    	}
    	tft_prints(9,6,"%d",avgiy);
    	diff[0]=((avgiy-Y)*sin(theta));  // front horizontal distance

    	if (slope2 > 0 && slope2 <= 0.7 ){
    		diff[2] = 1; //drift
    		HD=80;
    	}
    	else if (slope>=0){
    		HD=80;
    		diff[2] = 2;
    	}else{
    		diff[2] = 0;
    	}

//    	if (HD>45){
//    		HD*=1.1;
//    	}
    	if (/*HD <= 2 || */slope >0){
    		HD = THD;
    		if (slope2<0){
    			diff[5] = 1;
    		}else{diff[5] = 0;}
    	}
//    	if (HD-lastHD>45){
//    		HD=lastHD;
//    	}
//    	lastHD=HD;
    	diff[1] = ( THD - HD); // diff<0: target to turn left, diff>0: target to turn right
    	tft_prints(0,6,"%.4f",diff[0]);
//    	tft_prints(0,7,"%.4f, %.4f",slope,slope2);
    	tft_prints(0,7,"%.4f %d", slope, countline2);
    	tft_prints(0,8,"%.4f",HD);

}


/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
	/* USER CODE BEGIN 1 */

	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();

	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();

	/* USER CODE BEGIN SysInit */
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */

	MX_GPIO_Init();
	MX_CAN1_Init();
	MX_CAN2_Init();
//	MX_USART1_UART_Init();
	MX_DMA_Init();
//	MX_USART2_UART_Init();
	MX_TIM5_Init();
	MX_TIM6_Init();
	MX_TIM4_Init();
	/* USER CODE BEGIN 2 */
	volatile uint32_t last_ticks = 0;
	// we turn off all the led first
	led_off(LED1);
	led_off(LED2);
	led_off(LED3);
	led_off(LED4);
	tft_init(PIN_ON_TOP, BLACK, WHITE, YELLOW, DARK_GREEN);

	// Init camera
	camera_GPIO_init();
	tft_prints(0, 0, "Initing camera");
	tft_update(0);
	if (camera_init() == CAM_NOT_INITED || camera_init() == CAM_INIT_ERROR) {
		tft_prints(0, 0, "No OV7725 module");
	} else {
		tft_prints(0, 0, "Inited");
		cam_set_state(CAM_CAPTURING);
	}
	tft_update(0);
	cam_set_window(0, 0, QQVGA_120x160);

	uint16_t imgx[HEIGHT*WIDTH] = {0};

	uint16_t imgy[HEIGHT*WIDTH]={0};

	cam_set_colormode(CAM_GRAYSCALE);
	pwm_init();
	float diff[5]={0}; // [0]: angle: front horizontal distance , [1] middle horizontal distance


//	cam_set_framesize(QQQVGA_60x80);
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		if (cam_is_frame_ready()) {
			cam_get_rgb565(imgx);
			SobelFilter(imgx,imgy,diff);
			pwm_forward(diff);

//			for (uint8_t i = 0; i<3;i++){
//				tft_prints(5,i+6,"%d",angle[i]);
//			}

			cam_rgb2printable(imgy, imgx);
			tft_print_image(imgx, 0, 0, cam_sizes[cam_get_framesize()].width,
							80);
//							cam_sizes[cam_get_framesize()].height);

			tft_update(0);
			led_toggle(LED2);
		}

		// led blinky - useful for indicating the condition of the board
		if (HAL_GetTick() - last_ticks >= 100) {
			led_toggle(LED4);
			last_ticks = HAL_GetTick();
		}
	}
	/* USER CODE END 3 */
}

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
	RCC_OscInitStruct.PLL.PLLM = 4;
	RCC_OscInitStruct.PLL.PLLN = 168;
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
	RCC_OscInitStruct.PLL.PLLQ = 4;
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
		Error_Handler();
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
		Error_Handler();
	}
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {}
	/* USER CODE END Error_Handler_Debug */
}

#ifdef USE_FULL_ASSERT
/**
 * @brief  Reports the name of the source file and the source line number
 *         where the assert_param error has occurred.
 * @param  file: pointer to the source file name
 * @param  line: assert_param error line source number
 * @retval None
 */
void assert_failed(uint8_t *file, uint32_t line) {
	/* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number,
	   ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
	/* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
